{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "09700b7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9aa71543",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Configurations\n",
    "\n",
    "## Network setting\n",
    "\n",
    "\n",
    "NUM_ES = 8\n",
    "NUM_SW = 8\n",
    "NUM_NODE = NUM_ES + NUM_SW\n",
    "NUM_PORT = 4\n",
    "NUM_QUEUES = 8\n",
    "DATA_RATE = 1\n",
    "ERROR = 1_000\n",
    "STRUCTURE = 1     ## 0:LINEAR, 1:RING, 2:MESH, 3:INDUSTRIAL\n",
    "\n",
    "\n",
    "\n",
    "# ## Task setting\n",
    "\n",
    "## Workload setting\n",
    "# HEADER = 'utilization'\n",
    "# MAX_FLOW, STEP = 1024, 2\n",
    "# PERIOD = [50_000, 100_000, 200_000, 400_000]\n",
    "# SIZE = [50, 100, 500, 750, 1000, 1500, 4500]\n",
    "# DEADLINE = [10_000, 25_000, 50_000, 75_000, 100_000, 200_000, 400_000, 600_000,\n",
    "# 800_000, 1_000_000]\n",
    "\n",
    "## Number of streams\n",
    "HEADER = 'stream'\n",
    "MAX_FLOW, STEP = 189, 10\n",
    "PERIOD = [50_000, 100_000, 200_000, 400_000]\n",
    "SIZE = [50, 100, 500, 750, 1000, 1500, 4500]\n",
    "DEADLINE = [10_000, 25_000, 50_000, 75_000, 100_000, 200_000, 400_000, 600_000,\n",
    "800_000, 1_000_000]\n",
    "\n",
    "# # ## -------- GENERATE A NORMAL DATASET -------------\n",
    "# HEADER = 'normal'\n",
    "# MAX_FLOW, STEP = 1024, 1\n",
    "# ## 1 Âµs to 1 ms from INDUSTRY PROFILE\n",
    "# PERIOD = [50_000, 100_000, 250_000, 600_000, 800_000, 1_000_000]\n",
    "# SIZE = [50, 100, 500, 1000, 1500, 4500]\n",
    "# DEADLINE = [10_000, 25_000, 50_000, 75_000, 100_000, 200_000, 400_000, 600_000,\n",
    "# 800_000, 1_000_000]\n",
    "\n",
    "## -------- GENERATE A SINGLE DATASET -------------\n",
    "# HEADER = 'single'\n",
    "# MAX_FLOW, STEP = 1024, 1\n",
    "# PERIOD = [1_000_000]\n",
    "# SIZE = [50, 100, 500, 1000, 1500, 4500]\n",
    "# DEADLINE = [10_000, 25_000, 50_000, 75_000, 100_000, 200_000, 400_000, 600_000,\n",
    "# 800_000, 1_000_000]\n",
    "\n",
    "## Global setting\n",
    "GRANULARITY = 100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4287c384",
   "metadata": {},
   "source": [
    "## Generate Network configuration file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "996a5fd4-8fd0-430b-b4f4-cf2f466272d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def linear(length, header):\n",
    "    for i in range(0, length - 1):\n",
    "        net[i, i+1] = 1\n",
    "        net[i+1, i] = 1\n",
    "        \n",
    "    result = []\n",
    "    for i in range(length):\n",
    "        for k in range(length):\n",
    "            if net[i][k]:\n",
    "                link = []\n",
    "                link.append((i, k))\n",
    "                link.append(NUM_QUEUES)\n",
    "                link.append(DATA_RATE)\n",
    "                link.append(ERROR)\n",
    "                link.append(0)\n",
    "                result.append(link)\n",
    "                \n",
    "        net[i+NUM_SW, i] = 1\n",
    "        link = []\n",
    "        link.append((i + NUM_SW, i))\n",
    "        link.append(NUM_QUEUES)\n",
    "        link.append(DATA_RATE)\n",
    "        link.append(ERROR)\n",
    "        link.append(0)\n",
    "        result.append(link)\n",
    "        \n",
    "        net[i, i+NUM_SW] = 1\n",
    "        link = []\n",
    "        link.append((i, i + NUM_SW))\n",
    "        link.append(NUM_QUEUES)\n",
    "        link.append(DATA_RATE)\n",
    "        link.append(ERROR)\n",
    "        link.append(0)\n",
    "        result.append(link)\n",
    "        \n",
    "    result = pd.DataFrame(result, columns=['link','q_num','rate','t_proc','t_prop'])\n",
    "    result.to_csv(header + '_topology.csv', index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5a865db5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def network(topo, header):\n",
    "    net = np.zeros(shape = (NUM_NODE, NUM_NODE))\n",
    "\n",
    "    ## Liner topology\n",
    "    if topo >= 0:\n",
    "        for i in range(0, NUM_SW - 1):\n",
    "            net[i, i+1] = 1\n",
    "            net[i+1, i] = 1\n",
    "        if topo >= 1:\n",
    "            net[0, NUM_SW - 1] = 1\n",
    "            net[NUM_SW - 1, 0] = 1\n",
    "        if topo >= 2:\n",
    "            for i in range(0, NUM_SW // 2):\n",
    "                net[i, i+NUM_SW // 2] = 1\n",
    "                net[i+NUM_SW // 2, i] = 1\n",
    "\n",
    "    result = []\n",
    "    for i in range(NUM_SW):\n",
    "        for k in range(NUM_SW):\n",
    "            if net[i][k]:\n",
    "                link = []\n",
    "                link.append((i, k))\n",
    "                link.append(NUM_QUEUES)\n",
    "                link.append(DATA_RATE)\n",
    "                link.append(ERROR)\n",
    "                link.append(0)\n",
    "                result.append(link)\n",
    "                \n",
    "        net[i+NUM_SW, i] = 1\n",
    "        link = []\n",
    "        link.append((i + NUM_SW, i))\n",
    "        link.append(NUM_QUEUES)\n",
    "        link.append(DATA_RATE)\n",
    "        link.append(ERROR)\n",
    "        link.append(0)\n",
    "        result.append(link)\n",
    "        \n",
    "        net[i, i+NUM_SW] = 1\n",
    "        link = []\n",
    "        link.append((i, i + NUM_SW))\n",
    "        link.append(NUM_QUEUES)\n",
    "        link.append(DATA_RATE)\n",
    "        link.append(ERROR)\n",
    "        link.append(0)\n",
    "        result.append(link)\n",
    "\n",
    "    result = pd.DataFrame(result, columns=['link','q_num','rate','t_proc','t_prop'])\n",
    "    result.to_csv(header + '_topology.csv', index=False)\n",
    "    \n",
    "    return net"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32055748",
   "metadata": {},
   "source": [
    "## Generate Task group"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36e530e7",
   "metadata": {},
   "source": [
    "         --------- Update Jun 23 ------------\n",
    "\n",
    "         Fix start and end points for better comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fc0bdbb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Shortest path\n",
    "def bfs_paths(graph, start, goal):\n",
    "    queue = [(start, [start])]\n",
    "    while queue:\n",
    "        (vertex, path) = queue.pop(0)\n",
    "        for _next in set(np.reshape(np.argwhere(graph[vertex] > 0),  -1)) - set(path):\n",
    "            if _next == goal:\n",
    "                yield path + [_next]\n",
    "            else:\n",
    "                queue.append((_next, path + [_next]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6a6a0294",
   "metadata": {},
   "outputs": [],
   "source": [
    "def task_uti(start, end, net, uti_thres, header, es_num = 8):\n",
    "    uti = 0\n",
    "    result = []\n",
    "    for i in range(len(start)):\n",
    "        while True:\n",
    "            period = np.random.choice(PERIOD)\n",
    "            size = np.random.choice(SIZE)\n",
    "            route = list(bfs_paths(net, start[i], end[i]))[0] \n",
    "            deadline = len(route) * (ERROR + size * 8) + np.random.choice(DEADLINE) \n",
    "            if deadline < period:\n",
    "                result.append([i, start[i], [end[i]], size, period, deadline, deadline])\n",
    "                uti += size * 8 / period\n",
    "                break\n",
    "        if uti / es_num > uti_thres:\n",
    "            print('Reach the utilization threshold: ', uti, '    Flow number: ', i)\n",
    "            break\n",
    "    result = pd.DataFrame(result, columns = ['id','src','dst','size','period','deadline','jitter'])\n",
    "    result.to_csv(header + '.csv', index=False)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "08b50a31",
   "metadata": {},
   "outputs": [],
   "source": [
    "def task(start, end, net, header, es_num = 8):\n",
    "    uti = 0\n",
    "    result = []\n",
    "    for i in range(len(start)):\n",
    "        while True:\n",
    "            period = np.random.choice(PERIOD)\n",
    "            size = np.random.choice(SIZE)\n",
    "            route = list(bfs_paths(net, start[i], end[i]))[0] \n",
    "            deadline = len(route) * (ERROR + size * 8) + np.random.choice(DEADLINE) \n",
    "            if deadline < period:\n",
    "                result.append([i, start[i], [end[i]], size, period, deadline, deadline])\n",
    "                uti += size * 8 / period\n",
    "                break\n",
    "    result = pd.DataFrame(result, columns = ['id','src','dst','size','period','deadline','jitter'])\n",
    "    result.to_csv(header + '.csv', index=False)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3244a8eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def multitask(start, end, net, header):\n",
    "    result = []\n",
    "    for i in range(len(start)):\n",
    "        flag = True\n",
    "        while flag:\n",
    "            flag = False\n",
    "            period = np.random.choice(PERIOD)\n",
    "            size = np.random.choice(SIZE)\n",
    "            for j in range(len(end[i])):\n",
    "                route = list(bfs_paths(net, start[i], end[i][j]))[0]\n",
    "                deadline = len(route) * (ERROR + size * 8) + np.random.choice(DEADLINE) \n",
    "                if deadline > period:\n",
    "                    flag = True\n",
    "                    break\n",
    "            if flag == False:\n",
    "                result.append([i, start[i], end[i], size, period, deadline, deadline])\n",
    "    result = pd.DataFrame(result, columns = ['id','src','dst','size','period','deadline','jitter'])\n",
    "    result.to_csv(header + '.csv', index=False)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a223021f",
   "metadata": {},
   "source": [
    "## Generate file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3dcfff68",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/10 [00:00<?, ?it/s]\n"
     ]
    },
    {
     "ename": "UFuncTypeError",
     "evalue": "ufunc 'add' did not contain a loop with signature matching types (dtype('float64'), dtype('<U4')) -> None",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mUFuncTypeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb Cell 13\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=12'>13</a>\u001b[0m \u001b[39m# ## Generate multicast flows\u001b[39;00m\n\u001b[1;32m     <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=13'>14</a>\u001b[0m \u001b[39m# multi = []\u001b[39;00m\n\u001b[1;32m     <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=14'>15</a>\u001b[0m \u001b[39m# for num_flow in range(10, MAX_FLOW, STEP):\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=24'>25</a>\u001b[0m \n\u001b[1;32m     <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=25'>26</a>\u001b[0m \u001b[39m## Generate taskset\u001b[39;00m\n\u001b[1;32m     <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=27'>28</a>\u001b[0m name \u001b[39m=\u001b[39m HEADER \u001b[39m+\u001b[39m \u001b[39m'\u001b[39m\u001b[39m/\u001b[39m\u001b[39m'\u001b[39m \u001b[39m+\u001b[39m HEADER \u001b[39m+\u001b[39m \u001b[39m'\u001b[39m\u001b[39m_\u001b[39m\u001b[39m'\u001b[39m \u001b[39m+\u001b[39m \u001b[39mstr\u001b[39m(\u001b[39mint\u001b[39m(uti \u001b[39m*\u001b[39m \u001b[39m100\u001b[39m)) \u001b[39m+\u001b[39m \u001b[39m'\u001b[39m\u001b[39m_\u001b[39m\u001b[39m'\u001b[39m \u001b[39m+\u001b[39m \u001b[39mstr\u001b[39m(ins)\n\u001b[0;32m---> <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=28'>29</a>\u001b[0m task(start, end, net, uti, name)\n",
      "\u001b[1;32m/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb Cell 13\u001b[0m in \u001b[0;36mtask\u001b[0;34m(start, end, net, header, es_num)\u001b[0m\n\u001b[1;32m     <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=12'>13</a>\u001b[0m             \u001b[39mbreak\u001b[39;00m\n\u001b[1;32m     <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=13'>14</a>\u001b[0m result \u001b[39m=\u001b[39m pd\u001b[39m.\u001b[39mDataFrame(result, columns \u001b[39m=\u001b[39m [\u001b[39m'\u001b[39m\u001b[39mid\u001b[39m\u001b[39m'\u001b[39m,\u001b[39m'\u001b[39m\u001b[39msrc\u001b[39m\u001b[39m'\u001b[39m,\u001b[39m'\u001b[39m\u001b[39mdst\u001b[39m\u001b[39m'\u001b[39m,\u001b[39m'\u001b[39m\u001b[39msize\u001b[39m\u001b[39m'\u001b[39m,\u001b[39m'\u001b[39m\u001b[39mperiod\u001b[39m\u001b[39m'\u001b[39m,\u001b[39m'\u001b[39m\u001b[39mdeadline\u001b[39m\u001b[39m'\u001b[39m,\u001b[39m'\u001b[39m\u001b[39mjitter\u001b[39m\u001b[39m'\u001b[39m])\n\u001b[0;32m---> <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=14'>15</a>\u001b[0m result\u001b[39m.\u001b[39mto_csv(header \u001b[39m+\u001b[39;49m \u001b[39m'\u001b[39;49m\u001b[39m.csv\u001b[39;49m\u001b[39m'\u001b[39;49m, index\u001b[39m=\u001b[39m\u001b[39mFalse\u001b[39;00m)\n\u001b[1;32m     <a href='vscode-notebook-cell:/home/chuanyu/Code/Time-Sensitive-Network-Benchmark/rtns_data/data_generator.ipynb#X14sZmlsZQ%3D%3D?line=15'>16</a>\u001b[0m \u001b[39mreturn\u001b[39;00m result\n",
      "\u001b[0;31mUFuncTypeError\u001b[0m: ufunc 'add' did not contain a loop with signature matching types (dtype('float64'), dtype('<U4')) -> None"
     ]
    }
   ],
   "source": [
    "# [network(network_scale, str(network_scale)) for network_scale in [0, 1, 2]]\n",
    "\n",
    "net = network(0, \"2\")\n",
    "for uti in tqdm(np.arange(0.05, 0.55, 0.05)):\n",
    "    for ins in range(0, 512):\n",
    "        ## Generate unicast flows\n",
    "        start = np.random.choice(np.array(range(NUM_SW, NUM_NODE)), MAX_FLOW)\n",
    "        end = []\n",
    "        for s in start:\n",
    "            end.append(np.random.choice([x for x in np.array(range(NUM_SW, NUM_NODE)) if x != s]))\n",
    "        end = np.array(end)\n",
    "\n",
    "        # ## Generate multicast flows\n",
    "        # multi = []\n",
    "        # for num_flow in range(10, MAX_FLOW, STEP):\n",
    "        #     start_mul = np.random.choice(np.array(range(NUM_SW, NUM_NODE)), num_flow)\n",
    "        #     end_mul = []\n",
    "        #     for s in start_mul:\n",
    "        #         temp = []\n",
    "        #         for k in range(np.random.randint(1, 5)):\n",
    "        #             temp.append(np.random.choice([x for x in np.array(range(NUM_SW, NUM_NODE)) if x != s and int(x) not in temp]))\n",
    "        #         end_mul.append(temp)\n",
    "        #     end_mul = np.array(end_mul)\n",
    "        #     multi.append([start_mul, end_mul])\n",
    "\n",
    "        ## Generate taskset\n",
    "\n",
    "        name = HEADER + '/' + HEADER + '_' + str(int(uti * 100)) + '_' + str(ins)\n",
    "        task(start, end, net, uti, name)\n",
    "\n",
    "        # for s, e in multi:\n",
    "        #     task_num = len(s)\n",
    "        #     name = str(task_num) + '_' + str(ins) + '_mul' + HEADER\n",
    "        #     multitask(s, e, net, name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "56741750",
   "metadata": {},
   "outputs": [],
   "source": [
    "net = network(0, \"2\")\n",
    "for num_flow in range(8, 189, 10):\n",
    "    for ins in range(0, 512):\n",
    "        ## Generate unicast flows\n",
    "        start = np.random.choice(np.array(range(NUM_SW, NUM_NODE)), num_flow)\n",
    "        \n",
    "        end = []\n",
    "        for s in start:\n",
    "            end.append(np.random.choice([x for x in np.array(range(NUM_SW, NUM_NODE)) if x != s]))\n",
    "        end = np.array(end)\n",
    "\n",
    "        name = HEADER + '/' + HEADER + '_' + str(num_flow) + '_' + str(ins)\n",
    "        task(start, end, net, name)\n",
    "\n",
    "        # for s, e in multi:\n",
    "        #     task_num = len(s)\n",
    "        #     name = str(task_num) + '_' + str(ins) + '_mul' + HEADER\n",
    "        #     multitask(s, e, net, name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9dd2c3b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "vscode": {
   "interpreter": {
    "hash": "e7370f93d1d0cde622a1f8e1c04877d8463912d04d973331ad4851f04de6915a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
