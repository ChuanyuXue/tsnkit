

Resource isolation:

    - Achieved by a guard process continuously pulling the resource utilization of all other processes and killing them if they exceed a threshold. 
    - Killing is based on SIGKILL you can find in each model file. 
    - Guard process is implemented in `src/utils/_system.py`.




<!-- \item Frank et al. (RTNS16\_nw): SMT-NW (SMT with no-wait) -->
<!-- \item Silviu et al. (RTNS16): SMT-WA (Satisfiability Modulo Theories) -->
\item Ramon et al. (RTAS18): AT (Window-based, Assignment and Array theory) \han{What does R stand for?}
<!-- \item Eike et al. (RTNS17): JRS-WA (Jount routing) -->
<!-- \item David et al. (RTNS21): JRS-NW (No-wait joint routing) -->
<!-- \item Jonathan et al. (RTCSA18): JRS-NW-L (No-wait joint routing with Logical indicator) -->
\item Eike et al. (RTCSA20): JRS-MC (Jount-routing with Multicast)
\item Marek et al. (COR22): LS-TB (List Scheduler with TraceBack)
\item Maryam et al. (SIGBED19): LS (List Scheduler)
\item Xi et al. (JAS21): SMT-FR (SMT with Fragmentation)
\item Ayman et al. (TII20): I-ILP (Iterative-ILP)
\item Marek et al. (CIE21): CP-WA (Constraint Programming)
\item Yuanbin et al. (ASPDAC22): SMT-PR (SMT with Preemption)
\item Xi et al. (ACCESS20): I-OMT (Iterative-OMT)
\item Jonathan et al. (RTAS20): CG (Conflict-graph)
\item Yanzhou et al. (GLOBECOM22): DT (Divisibility Theory)
